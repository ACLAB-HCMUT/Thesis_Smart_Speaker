import subprocess
import threading
import socket
import json
from chatgpt import get_response
import speech_recognition as sr
from audio_utils import speak
from command_listener import standalone_listen

music_process = None
stop_thread = None

# def send_mpv_command(command):
#     try:
#         client = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
#         client.connect("/tmp/mpv_socket")
#         client.send((json.dumps(command) + "\n").encode())
#         client.close()
#     except Exception as e:
#         print(" Kh√¥ng g·ª≠i ƒë∆∞·ª£c l·ªánh ƒë·∫øn mpv:", e)

# def pause_music():
#     print("‚è∏ G·ª≠i l·ªánh pause.")
#     send_mpv_command({ "command": ["set_property", "pause", True] })

# def resume_music():
#     print(" G·ª≠i l·ªánh resume.")
#     send_mpv_command({ "command": ["set_property", "pause", False] })

# def listen_for_music_commands():
#     while True:
#         command = standalone_listen()
#         if command:
#             command = command.lower()
#             if "D·ª´ng nh·∫°c" in command or "T·∫Øt nh·∫°c" in command or "pause" in command:
#                 speak("ƒê√£ d·ª´ng nh·∫°c.")
#                 pause_music()
#                 break
#             elif "Ti·∫øp t·ª•c" in command or "resume" in command:
#                 speak("Ti·∫øp t·ª•c nh·∫°c.")
#                 resume_music()
#                 break

def control_mpv(state):
    try:
        client = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        client.connect("/tmp/mpv_socket")
        client.send((json.dumps(state) + "\n").encode("utf-8"))
        response = client.recv(1024)
        client.close()
        print("üéµ Ph·∫£n h·ªìi t·ª´ mpv:", response.decode("utf-8"))
    except Exception as e:
        print(" Kh√¥ng g·ª≠i ƒë∆∞·ª£c l·ªánh t·ªõi mpv:", e)

def listen_for_command():
    recognizer = sr.Recognizer()
    mic = sr.Microphone()

    print("ƒêang l·∫Øng nghe...")
    with mic as source:
        recognizer.adjust_for_ambient_noise(source)
        while True:
            try:
                audio = recognizer.listen(source, timeout=5)
                command = recognizer.recognize_google(audio, language='vi-VN').lower()
                print("Nghe ƒë∆∞·ª£c:", command)

                if "stop" in command or "T·∫Øt nh·∫°c" in command or "t·∫Øt nh·∫°c" in command:
                    control_mpv("quit")
                    break
                elif "ƒë·ªìng b·ªô" in command:
                    from send import send_attribute_to_coreiot
                    send_attribute_to_coreiot("fw_tag", "1")
                    continue

                elif "pause" in command or "T·∫°m d·ª´ng" in command or "t·∫°m d·ª´ng" in command:
                    control_mpv({ "command": ["set_property", "pause", True] })
                    continue
                elif "resume" in command or "Ti·∫øp t·ª•c" in command or "ti·∫øp t·ª•c" in command:
                    control_mpv({ "command": ["set_property", "pause", False] })
                    continue
                elif "volume up to 10" in command or "TƒÉng √¢m l∆∞·ª£ng l√™n 10" in command or "tƒÉng √¢m l∆∞·ª£ng l√™n 10" in command or "tƒÉng √¢m l∆∞·ª£ng l√™n m∆∞·ªùi" in command or "TƒÉng √¢m l∆∞·ª£ng l√™n m∆∞·ªùi" in command:
                    control_mpv({"command": ["add", "volume", 10]})
                    continue
                elif "volume up to 5" in command or "TƒÉng √¢m l∆∞·ª£ng l√™n 5" in command or "tƒÉng √¢m l∆∞·ª£ng l√™n 5" in command or "tƒÉng √¢m l∆∞·ª£ng l√™n nƒÉm" in command or "TƒÉng √¢m l∆∞·ª£ng l√™n nƒÉm" in command:
                    control_mpv({"command": ["add", "volume", 5]})
                    continue
                elif "volume up to 25" in command or "TƒÉng √¢m l∆∞·ª£ng l√™n 25" in command or "tƒÉng √¢m l∆∞·ª£ng l√™n 25" in command or "tƒÉng √¢m l∆∞·ª£ng l√™n hai m∆∞∆°i lƒÉm" in command or "TƒÉng √¢m l∆∞·ª£ng l√™n hai lƒÉm" in command:
                    control_mpv({"command": ["add", "volume", 25]})
                    continue
                elif "volume down to 10" in command or "Gi·∫£m √¢m l∆∞·ª£ng xu·ªëng 10" in command or "gi·∫£m √¢m l∆∞·ª£ng xu·ªëng 10" in command or "gi·∫£m √¢m l∆∞·ª£ng xu·ªëng m∆∞·ªùi" in command or "Gi·∫£m √¢m l∆∞·ª£ng xu·ªëng m∆∞·ªùi" in command:
                    control_mpv({"command": ["add", "volume", -10]})
                    continue
                elif "volume down to 5" in command or "Gi·∫£m √¢m l∆∞·ª£ng xu·ªëng 5" in command or "gi·∫£m √¢m l∆∞·ª£ng xu·ªëng 5" in command or "gi·∫£m √¢m l∆∞·ª£ng xu·ªëng nƒÉm" in command or "Gi·∫£m √¢m l∆∞·ª£ng xu·ªëng nƒÉm" in command:
                    control_mpv({"command": ["add", "volume", -5]})
                    continue
                elif "volume down to 25" in command or "Gi·∫£m √¢m l∆∞·ª£ng xu·ªëng 25" in command or "gi·∫£m √¢m l∆∞·ª£ng xu·ªëng 25" in command or "gi·∫£m √¢m l∆∞·ª£ng xu·ªëng hai m∆∞∆°i lƒÉm" in command or "Gi·∫£m √¢m l∆∞·ª£ng xu·ªëng hai lƒÉm" in command:
                    control_mpv({"command": ["add", "volume", -25]})
                    continue

            except sr.WaitTimeoutError:
                continue
            except sr.UnknownValueError:
                continue
            except sr.RequestError as e:
                print(" L·ªói k·∫øt n·ªëi API:", e)
                break

def process_command(command):
    global music_process
    global stop_thread

    command = command.lower()

    if any(keyword in command for keyword in ["ph√°t nh·∫°c", "nh·∫°c", "m·ªü b√†i"]):
        query = command
        for keyword in ["ph√°t nh·∫°c", "m·ªü nh·∫°c", "m·ªü b√†i", "ƒëi"]:
            query = query.replace(keyword, "").strip()

        if query:
            speak(f"ƒêang ph√°t b√†i {query}")
            print(f"üéµ ƒêang ph√°t b√†i: {query}")

            try:
                music_process = subprocess.Popen(["./play_yt.sh", query])
                listener_thread = threading.Thread(target=listen_for_command)
                listener_thread.start()
                # stop_thread = threading.Thread(target=listen_for_music_commands)
                # stop_thread.daemon = True
                # stop_thread.start()
                # music_process.wait()
                # print(" B√†i h√°t ƒë√£ ph√°t xong.")
                # music_process = None
            except Exception as e:
                print(" L·ªói khi ph√°t nh·∫°c:", e)
                control_mpv("quit")
                return
        else:
            speak("Vui l√≤ng n√≥i r√µ t√™n b√†i h√°t b·∫°n mu·ªën ph√°t.")

    # elif "d·ª´ng nh·∫°c" in command or "pause" in command:
    #     speak("ƒêang d·ª´ng nh·∫°c.")
    #     pause_music()

    # elif "ti·∫øp t·ª•c" in command and "nh·∫°c" in command:
    #     speak("Ti·∫øp t·ª•c nh·∫°c.")
    #     resume_music()
    elif "ng∆∞ng" and "ƒë·ªìng b·ªô" in command:
        subprocess.run(["./switch_snapclient.sh", "127.0.0.1"], check=True)
        speak("ƒê√£ ng∆∞ng ƒë·ªìng b·ªô.")
    elif "chuy·ªÉn sang" in command and "youtube" in command:
        subprocess.run(["python", "./change_stream.py", "YouTube"])
        speak("Chuy·ªÉn sang ngu·ªìn nh·∫°c YouTube.")

    elif "chuy·ªÉn sang" in command and "spotify" in command:
        subprocess.run(["python", "./change_stream.py", "Spotify"])
        speak("Chuy·ªÉn sang ngu·ªìn nh·∫°c Spotify.")
    # if any(keyword in command for keyword in ["8d","8D","t√°m ƒë√™", "8 ƒë√™"]):

    #     query = command
    #     for keyword in ["ph√°t nh·∫°c", "m·ªü nh·∫°c", "m·ªü b√†i","8D", "8d"]:
    #         query = query.replace(keyword, "").strip()
    #     if query:
    #         video_url = search_youtube8(query)
    #         if video_url:
    #             speak(f"M·ªùi b·∫°n nghe nh·∫°c {query}.")
    #             download_and_play_youtube_audio8(video_url)
    #         else:
    #             speak("Kh√¥ng t√¨m th·∫•y b√†i h√°t tr√™n YouTube.")
    #     else:
    #         speak("Vui l√≤ng n√≥i r√µ t√™n b√†i h√°t b·∫°n mu·ªën ph√°t.")
    # if any(keyword in command for keyword in ["ph√°t nh·∫°c", "nh·∫°c", "m·ªü b√†i"]):

    #     query = command
    #     for keyword in ["ph√°t nh·∫°c", "m·ªü nh·∫°c", "m·ªü b√†i"]:
    #         query = query.replace(keyword, "").strip()
    #     if query:
    #         from music import search_youtube
    #         video_url = search_youtube(query)
    #         if video_url:
    #             from music import download_and_play_youtube_audio
    #             speak(f"M·ªùi b·∫°n nghe nh·∫°c {query}.")
    #             download_and_play_youtube_audio(video_url)
    #         else:
    #             speak("Kh√¥ng t√¨m th·∫•y b√†i h√°t tr√™n YouTube.")
    #     else:
    #         speak("Vui l√≤ng n√≥i r√µ t√™n b√†i h√°t b·∫°n mu·ªën ph√°t.")
    elif any(
        keyword in command
        for keyword in ["b√°o th·ª©c", "nh·∫Øc nh·ªü", "h·∫πn gi·ªù"]
    ):
        from reminders import alarm_reminder_action
        print ("process:", command)
        response = alarm_reminder_action(command)
        print(response)
        speak(response)
        return 1
    # elif is_device_command(command):
    #     actions = {
    #         'b·∫≠t': 'on',
    #         'm·ªü': 'on',
    #         't·∫Øt': 'off',
    #         'ƒë√≥ng': 'off'
    #     }
    #     devices = {
    #         'ƒë√®n': 'led1',
    #         'qu·∫°t': 'fan',  
    #         'c·ª≠a': 'door',
    #         'm√°y l·∫°nh': 'ac'
    #     }
    #     rooms = ['ph√≤ng kh√°ch', 'ph√≤ng ng·ªß', 'ph√≤ng b·∫øp']

    #     room_pattern = r'\b(' + '|'.join(rooms) + r')\b'
    #     device_pattern = r'\b(' + '|'.join(devices) + r')\b'
    #     action_pattern = r'\b(' + '|'.join(actions.keys()) + r')\b'

    #     room_match = re.search(room_pattern, command, re.IGNORECASE)
    #     device_match = re.search(device_pattern, command, re.IGNORECASE)
    #     action_match = re.search(action_pattern, command, re.IGNORECASE)
    #     response=""
        
    #     # case 1: full command
    #     if room_match and device_match and action_match:
    #         check=control(command)
    #         # if check==1:
    #         #     return 1 
    #         response="Em ƒë√£ th·ª±c hi·ªán l·ªánh ·∫°."           
    #     # case 2: missing device, but room, action are present
    #     elif room_match and action_match and not device_match:
    #         room = room_match.group(0)
    #         action = actions[action_match.group(0).lower()]
    #         response=f"Vui l√≤ng ch·ªâ ƒë·ªãnh thi·∫øt b·ªã ƒë·ªÉ {action_match.group(0).lower()} ·ªü {room}."

    #     # case 3: missing action, but room, device are present
    #     elif room_match and device_match and not action_match:
    #         room = room_match.group(0)
    #         device = device_match.group(0)
    #         response=f"Vui l√≤ng ch·ªâ ƒë·ªãnh h√†nh ƒë·ªông cho {device} ·ªü {room}."
        
    #     # case 4: room mentioned but missing both action and device
    #     elif room_match and not action_match and not device_match:
    #         room = room_match.group(0)
    #         response=f"Vui l√≤ng ch·ªâ ƒë·ªãnh thi·∫øt b·ªã v√† h√†nh ƒë·ªông ·ªü {room}."
    #     elif action_match and device_match and not room_match:
    #         device = device_match.group(0)
    #         action = action_match.group(0)
    #         response = f"Vui l√≤ng ch·ªâ ƒë·ªãnh ph√≤ng ƒë·ªÉ {action_match.group(0).lower()} {device}."
    #     elif action_match and device_match and not room_match:
    #         device = device_match.group(0)
    #         action = action_match.group(0)
    #         response = f"Vui l√≤ng ch·ªâ ƒë·ªãnh ph√≤ng ƒë·ªÉ {action_match.group(0).lower()} {device}."
    #     # case 5: command not recognized
    #     else:
    #         response="L·ªánh kh√¥ng ƒë∆∞·ª£c nh·∫≠n di·ªán, vui l√≤ng th·ª≠ l·∫°i."
        
    #     print(response)
    #     speak(response)
    elif command =="h√¥m nay":
        from weather import fetch_weather_data
        from time_utils import get_current_date_vn_format
        today= get_current_date_vn_format()
        today += " "
        today += fetch_weather_data()
        speak(today)
    elif command=="th·ªùi ti·∫øt" or command=="th·ªùi ti·∫øt h√¥m nay":
        from weather import fetch_weather_data 
        speak(fetch_weather_data())

    elif any(
        keyword in command
        for keyword in ["gi·ªçng n·ªØ", "gi·ªçng con g√°i", "gi·ªçng ƒë√†n b√†", "gi·ªçng ph·ª• n·ªØ"]
    ):
        from audio_utils import set_default_voice
        set_default_voice("female")
        return 
    elif any(
        keyword in command
        for keyword in ["gi·ªçng nam", "gi·ªçng con trai", "gi·ªçng ƒë√†n √¥ng"]
    ):
        from audio_utils import set_default_voice
        set_default_voice("male")
        return
    # elif "gi·ªçng m·∫∑c ƒë·ªãnh" in command:
    #     set_default_voice("default")
    #     return
    elif any(
        keyword in command
        for keyword in ["l·∫•y l·ªãch", "xem l·ªãch", "hi·ªÉn th·ªã l·ªãch", "danh s√°ch s·ª± ki·ªán", "xem s·ª± ki·ªán"]
    ):  
        from my_calendar import get_calendar_events
        print("ƒêang l·∫•y danh s√°ch s·ª± ki·ªán...")
        speak(get_calendar_events())
    elif any(
         keyword in command
         for keyword in ["t√¨m ƒëi·ªán tho·∫°i", "t√¨m", "ki·∫øm ƒëi·ªán tho·∫°i","ki·∫øm"]
     ):  
         
         make_call()
         speak("ƒêang nh√° m√°y ƒëi·ªán tho·∫°i")
    elif any(
        keyword in command
        for keyword in [
            "b√¢y gi·ªù l√† m·∫•y gi·ªù",
            "m·∫•y gi·ªù r·ªìi",
            "gi·ªù hi·ªán t·∫°i",
            "b√¢y gi·ªù ƒëang l√† m·∫•y gi·ªù",
            "hi·ªán t·∫°i ƒëang m·∫•y gi·ªù",
            "hi·ªán t·∫°i m·∫•y gi·ªù",
        ]
    ):  
        from time_utils import get_current_time
        get_current_time()
    elif any(
        keyword in command
        for keyword in ["x√≥a s·ª± ki·ªán", "g·ª° s·ª± ki·ªán", "x√≥a l·ªãch", "g·ª° l·ªãch", "h·ªßy s·ª± ki·ªán"]
    ):
        print("ƒêang x√≥a s·ª± ki·ªán...")

        if "v√†o" in command or "ng√†y" in command:
            from my_calendar import extract_time_from_command
            time_to_delete = extract_time_from_command(command)
            if time_to_delete:
                from my_calendar import delete_event_by_name_or_time
                response = delete_event_by_name_or_time(start_time=time_to_delete)
                print(f"ƒê√£ x√≥a s·ª± ki·ªán v√†o {time_to_delete}.")
            else:
                response = "Kh√¥ng th·ªÉ x√°c ƒë·ªãnh th·ªùi gian c·ªßa s·ª± ki·ªán. Vui l√≤ng th·ª≠ l·∫°i."
            speak(response)

        else:
            from my_calendar import extract_event_name_from_command
            event_name = extract_event_name_from_command(command)
            if event_name:
                from my_calendar import delete_event_by_name_or_time
                response = delete_event_by_name_or_time(summary=event_name)
                print(f"ƒê√£ x√≥a s·ª± ki·ªán '{event_name}'.")
            else:
                response = "Vui l√≤ng cung c·∫•p t√™n s·ª± ki·ªán b·∫°n mu·ªën x√≥a."
                speak(response)

        print(response)
        speak(response)
    elif any(
        keyword in command for keyword in ["th√™m s·ª± ki·ªán", "t·∫°o s·ª± ki·ªán", "l√™n s·ª± ki·ªán","th√™m l·ªãch", "l√™n l·ªãch"]
    ):  
        from my_calendar import input_for_add_event
        input_for_add_event()  # add_event inside here
        # print("ƒêang t·∫°o s·ª± ki·ªán m·ªõi...")
        # summary = "H·ªçp nh√≥m d·ª± √°n"
        # location = "H·ªì Ch√≠ Minh, Vi·ªát Nam"
        # description = "Th·∫£o lu·∫≠n ti·∫øn ƒë·ªô d·ª± √°n."
        # start_time = "2024-11-24T10:00:00+07:00"
        # end_time = "2024-11-24T11:00:00+07:00"
        # add_event(summary, location, description, start_time, end_time)
    # elif "b·∫≠t c·∫£m bi·∫øn" in command or "t·∫Øt c·∫£m bi·∫øn" in command:
    #     if "ƒë·ªô ·∫©m" in command:
    #         if "b·∫≠t" in command:
    #             set_sensor_status(MOISTURE_FEED, True)
    #         elif "t·∫Øt" in command:
    #             set_sensor_status(MOISTURE_FEED, False)
    #     elif "nhi·ªát ƒë·ªô" in command:
    #         if "b·∫≠t" in command:
    #             set_sensor_status(TEMPERATURE_FEED, True)
    #         elif "t·∫Øt" in command:
    #             set_sensor_status(TEMPERATURE_FEED, False)
    # elif "√¢m l∆∞·ª£ng" in command or "loa" in command:
    #     volume_level = re.search(r"\d+", command)
    #     if volume_level:
    #         volume_level = int(volume_level.group())
    #         if volume_level > 100:
    #             volume_level = 100
    #         elif volume_level < 0:
    #             volume_level = 0
    #     else:
    #         volume_level = 50
    #     set_volume(volume_level)
    #     response = f"ƒê√£ ƒëi·ªÅu ch·ªânh √¢m l∆∞·ª£ng ƒë·∫øn {volume_level}%."
    #     print(response)
    #     speak(response)
    elif any(keyword in command for keyword in ["d·ª´ng nh·∫°c", "t·∫Øt nh·∫°c"]):
        from music import stop_music
        stop_music()
        # stop_music8()

    elif "k√™u" in command or ("ti·∫øng" in command and "k√™u" in command):
        from kid_mode import play_sound_animal
        play_sound_animal(command)
    elif "k·ªÉ" in command and ("truy·ªán" in command or "chuy·ªán" in command):
        print("ƒêang k·ªÉ truy·ªán...")
        from kid_mode import play_story_sound
        play_story_sound()
    elif any(keyword in command for keyword in ["ƒë∆∞·ªùng t·ª´", "t√¨m ƒë∆∞·ªùng", "ch·ªâ ƒë∆∞·ªùng", "h∆∞·ªõng d·∫´n ƒë∆∞·ªùng", "ƒë∆∞·ªùng ƒëi t·ª´", "h·ªèi ƒë∆∞·ªùng"]):
        from navigation import process_direction
        process_direction(command)
    elif any(
        keyword in command
        for keyword in ["th·ªùi ti·∫øt", "tin t·ª©c", "h√¥m nay", "hi·ªán nay", "th·ªùi s·ª±"]
    ):  
        from search_agent import search_and_summarize
        tavily_answer = search_and_summarize(command)
        speak(tavily_answer)
        print(f"Final Answer: {tavily_answer}")
                
    # elif any(
    #     keyword in command
    #     for keyword in [
    #         "cƒÉn",
    #         "giai th·ª´a",
    #         "ƒë·∫°o h√†m",
    #         "t√≠ch ph√¢n",
    #         "b√¨nh ph∆∞∆°ng",
    #         "ph√©p t√≠nh",
    #         "chia",
    #         "nh√¢n",
    #         "c·ªông",
    #         "tr·ª´",
    #         "h√†m s·ªë m≈©",
    #         "logarit",
    #         "l·∫≠p ph∆∞∆°ng",
    #         "+",
    #         "/",
    #         "x",
    #     ]
    # ):
    #     try:
    #         result = math_calculation(command)
    #         print(f"K·∫øt qu·∫£ to√°n h·ªçc: {result}")
    #         speak(result)
    #     except Exception as e:
    #         print(f"L·ªói x·ª≠ l√Ω to√°n h·ªçc: {e}")
    #         speak("Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω ph√©p to√°n n√†y.")
    else:
        print("G·ª≠i y√™u c·∫ßu ƒë·∫øn ChatGPT API...")
        
        chatgpt_answer = get_response(command)
        print(f"ChatGPT tr·∫£ l·ªùi: {chatgpt_answer}")
        speak(chatgpt_answer)

# make_call()